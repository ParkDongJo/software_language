/**
 * 프로그램 언어의 다형성(多形性, polymorphism; 폴리모피즘)은 그 프로그래밍 언어의 자료형 체계의 성질을 나타내는 것으로, 
 * 프로그램 언어의 각 요소들(상수, 변수, 식, 오브젝트, 함수, 메소드 등)이 다양한 자료형(type)에 속하는 것이 허가되는 성질을 가리킨다.
 *  반댓말은 단형성(monomorphism)으로, 프로그램 언어의 각 요소가 한가지 형태만 가지는 성질을 가리킨다.
 */

// 메서드
// 여기서 map()은 Arrays Object(객체) 내부에 있는 메서드
console.log(
[1,2,3,4].map((e) => e*2)
)

// 함수
// 여기서 _map은 독립적인 함수
console.log(
    _map([1,2,3,4], (e) => e*2)
)


// 1. 외부 다형성

// 유사 배열 (array like)
// - arguments, document.querySelectAll, $('div')
// 유사배열은 Array가 아니기 때문에, Array 객체에서 지원하는 map(), filter()를 사용할 수 없다.
// 이는 객제지향형 프로그래밍의 특징인데

console.log(document.querySelectorAll("*"))

// 이는 함수형 프로그래밍에서는 가능하다.
// 다형성 수준을 더 높게 프로그래밍이 가능하다.
console.log(
    _map(document.querySelectorAll("*"),
    (node) => node.nodeName)
)


// 2. 내부 다형성
// 내부의 다형성을 결정하는것,
// 즉 데이터 인자로 어떠한 배열 데이터형(in 예시)이 들어가도 동작하게 하는 역할은
// 보조함수 predi(), iter(), mapper() 같은 보조 함수들이 수행한다.
// 아래와 같이 개발자의 자유도에 의해서, 보조함수를 넘겨줌으로써 데이터형에 구애 받지 않고,
// 코드의 가독성, 중복 코드 분리, 코드품질 등등을 올릴 수 있다.
console.log(
    _map([1,2,3,4], 
    (num) => num*2)
)

console.log(
    _map(document.querySelectorAll("*"),
    (node) => node.nodeName)
)



/*-------------------------------------------------------------*/
// 객체지향형 프로그래밍 에서는
// 아래와 같이 [1,2,3,4] 데이터가 있어야, 메서드를 통해 데이터를 평가할 수 있다.
// 즉 평가시점은 데이터 생성 이후이다.
console.log(
    [1,2,3,4].map((e) => e*2)
)

// 함수형 프로그래밍 에서는
// _map() 함수가 먼저 존재하기 때문에, [1,2,3,4]가 생성되지 않더라도
// 평가시점이 상대적으로 훨씬 유연해 진다.
console.log(
    _map([1,2,3,4], (e) => e*2)
)
    